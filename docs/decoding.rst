.. _decoding:

Decoding
========

Decoding ABI Values
-------------------

Binary values for a given ABI type can be decoded into python values as
follows:

.. doctest::

    >>> from eth_abi import decode

    >>> # decode a single ABI type
    >>> decode(
    ...     b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0009',
    ...     ['uint256']
    ... )
    (12345,)

    >>> # decode multiple ABI types
    >>> decode(
    ...     b'a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
    ...     ['bytes1', 'bytes1']
    ... )
    (b'a', b'b')

    >>> # decode a single tuple type with two `bytes1` types
    >>> decode(
    ...     b'a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
    ...     ['(bytes1,bytes1)']
    ... )
    ((b'a', b'b'),)

The :any:`decode` function provides an API for decoding ABI types. It accepts the binary data to be decoded for the
first argument, as a python ``bytes`` or ``bytearray`` value, and a sequence of type strings to be decoded into for the
second argument.
